
Давайте разберем архитектуру и смысл этого приложения на Go, построенного для управления книжным магазином:

Общая Архитектура:
Папка cmd/main (main.go):

Это точка входа в ваше приложение. Здесь запускается веб-сервер, настраиваются маршруты (routes) и начинается прослушивание HTTP-запросов.
Использует gorilla/mux для маршрутизации и github.com/zhakhangers/go-bookstore/pkg/routes для определения маршрутов вашего веб-приложения.
Папка pkg:

Содержит основную логику приложения, разделенную на разные модули.
Конкретные Модули:
config/app.go:

Здесь происходит подключение к базе данных с использованием ORM GORM.
Функция Connect устанавливает соединение с базой данных, а GetDB предоставляет доступ к этому соединению.
controllers/book-controller.go:

Определяет контроллеры для различных действий, связанных с книгами (например, получение всех книг, создание новой книги, удаление и обновление книги).
Каждая функция в этом файле обрабатывает определенный HTTP-запрос, возвращая данные в формате JSON.
routes/book-routes.go:

Определяет маршруты HTTP-запросов для вашего приложения, связывая их с соответствующими функциями контроллеров из controllers.
utils/utils.go:

Содержит вспомогательные функции, такие как ParseBody, которая анализирует тело HTTP-запроса и преобразует его в объект Go.
models/book.go:

Определяет структуру данных Book и методы для взаимодействия с базой данных, такие как создание новой книги, получение книги по ID, удаление и получение всех книг.
Использует GORM для ORM-маппинга.
Как Это Работает:
Пользователь делает HTTP-запрос (например, чтобы получить список всех книг или добавить новую книгу).
Запрос поступает в приложение через main.go, который направляет запрос к соответствующему маршруту в routes.
Маршрут вызывает соответствующую функцию контроллера в controllers.
Контроллер обрабатывает запрос, используя модели из models для взаимодействия с базой данных и возвращая результаты.
Вся обработка данных, включая чтение и запись в базу данных, выполняется через унифицированные структуры и методы, определенные в моделях.
Вспомогательные функции в utils могут использоваться для общих задач, таких как разбор тела запроса.
Эта архитектура позволяет четко разделить логику приложения на управление данными (модели), обработку запросов (контроллеры), маршрутизацию и конфигурацию, делая код более организованным, модульным и легким для поддержки.
